import React, { useState, useEffect } from "react";
import { fetchPlanes } from "../plane/Api";
import { planeList } from "../../../constant/index";

const SearchBox = () => {
  const [searchQuery, setSearchQuery] = useState(""); // D√πng ƒë·ªÉ l∆∞u gi√° tr·ªã nh·∫≠p v√†o √¥ t√¨m ki·∫øm
  const [searchResult, setSearchResult] = useState(null); // K·∫øt qu·∫£ t√¨m ki·∫øm
  const [error, setError] = useState(""); // Th√¥ng b√°o l·ªói
  const [loading, setLoading] = useState(true);
  const [tableData, setTableData] = useState(planeList);


  useEffect(() => {
    const loadPlanes = async () => {
      try {
        setLoading(true);
        const planes = await fetchPlanes(); // G·ªçi h√†m fetchTickets
        setTableData(planes); // L∆∞u danh s√°ch v√© v√†o state
      } catch (error) {
        console.error("Failed to load planes:", error.message);
      } finally {
        setLoading(false);
      }
    };

    loadPlanes();
  }, []);

  if (!tableData || tableData.length === 0) {
    setError("No data available to search."); // D·ªØ li·ªáu tr·ªëng
    return;
  }
  
  const handleSearch = (e) => {
    e.preventDefault();
    setError(""); // X√≥a l·ªói tr∆∞·ªõc ƒë√≥
    setSearchResult(null); // X√≥a k·∫øt qu·∫£ tr∆∞·ªõc ƒë√≥

    if (!searchQuery.trim()) {
      setError("Please enter a booking code."); // Th√¥ng b√°o n·∫øu gi√° tr·ªã nh·∫≠p v√†o tr·ªëng
      return;
    }

    // T√¨m ki·∫øm trong tableData
    const result = tableData.find(
      (plane) => plane.IDPlane.toLowerCase() === searchQuery.toLowerCase()
    );

    if (result) {
      setSearchResult(result); // Hi·ªÉn th·ªã k·∫øt qu·∫£ n·∫øu t√¨m th·∫•y
    } else {
      setError("No ticket found with the given booking code."); // Hi·ªÉn th·ªã l·ªói n·∫øu kh√¥ng t√¨m th·∫•y
    }
  };

  if (loading) return <p>Loading...</p>;

  return (
    <div className="flex flex-col items-center my-5">
      <form onSubmit={handleSearch} className="flex">
        <input
          type="text"
          placeholder="Enter IDPlane"
          value={searchQuery} // S·ª≠ d·ª•ng searchQuery cho gi√° tr·ªã √¥ input
          onChange={(e) => setSearchQuery(e.target.value)} // C·∫≠p nh·∫≠t searchQuery khi thay ƒë·ªïi input
          className="p-2 text-base w-60 border border-gray-300 rounded-l-lg"
          required
        />
        <button
          type="submit"
          className="p-2 px-4 text-base bg-blue-800 text-white rounded-r-lg hover:bg-blue-900 transition-colors duration-300"
        >
          üîç
        </button>
      </form>

      {/* Hi·ªÉn th·ªã th√¥ng b√°o l·ªói n·∫øu c√≥ */}
      {error && <p className="text-red-500 mt-4">{error}</p>}

      {/* Hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm n·∫øu c√≥ */}
      {searchResult && (
        <div className="mt-4 p-4 border border-gray-300 rounded-lg bg-gray-100">
          <h3 className="font-semibold text-lg">Search Result:</h3>
          <p><strong>ID Plane:</strong> {searchResult.IDPlane}</p>
          <p><strong>Name Plane: </strong> {searchResult.NamePlane}</p>
          <p><strong>Business Seat:</strong> {searchResult.Business}</p>
          <p><strong>Economy Seat:</strong> {searchResult.Economy}</p>
          <p><strong>Airline:</strong> {searchResult.Airline}</p>
        </div>
      )}
    </div>
  );
};

export default SearchBox;
